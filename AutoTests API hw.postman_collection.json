{
	"info": {
		"_postman_id": "e90f679c-c6b1-48b2-acd7-1cd33ee99668",
		"name": "Home work",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19459230"
	},
	"item": [
		{
			"name": "first.Check response body string",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}:{{port}}/first",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Info 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"    var jsonData = pm.response.json();\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"check to have right name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Serhii\");\r",
							"});\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"check to have right age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"28\");\r",
							"});\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"check to have right salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"var responseName =jsonData.name\r",
							"var responseAge =jsonData.age\r",
							"var responseSalary =jsonData.salary\r",
							"var u_salary_1_5_year = jsonData.family.u_salary_1_5_year\r",
							"//7. Спарсить request.\r",
							"var reqName = request.data.name\r",
							"var reqAge = request.data.age\r",
							"var reqSalary = request.data.salary\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"age response == age request\", function () {\r",
							"    pm.expect(responseName).to.eql(reqName);\r",
							"});\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age request == age response\",function(){\r",
							"pm.expect(responseAge).to.eql(reqAge)\r",
							"})\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary request == salary response\",function(){\r",
							"pm.expect(reqSalary).to.eql(reqSalary)\r",
							"})\r",
							"//11. Вывести в консоль параметр family из response\r",
							"console.log(jsonData.family)\r",
							"\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year request == salary*4 response\",function(){\r",
							"pm.expect(1000*4).to.eql(u_salary_1_5_year)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Serhii",
							"type": "text"
						},
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://{{url}}:{{port}}/user_info_3",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Object info 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"var parseReqParama = pm.request.url.query.toObject()\r",
							"var reqNameParam = pm.request.url.query.toObject().name\r",
							"var reqAgeParam = pm.request.url.query.toObject().age\r",
							"var reqSalaryParam = pm.request.url.query.toObject().salary\r",
							"//спарсил ответ\r",
							"var responseName = jsonData.name\r",
							"var responseAge = jsonData.age\r",
							"var responseSalary = jsonData.salary\r",
							"var u_salary_1_5_year = jsonData.family.u_salary_1_5_year\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"request param name == response name \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(responseName).to.eql(reqNameParam);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"request param age == response age \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(responseAge).to.eql(reqAgeParam);\r",
							"});\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"// responseSalary-тип намбер. reqSalaryParam - стринг. В проверке приобразовал в намбер\r",
							"pm.test(\"request param salary == response salary \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(responseSalary).to.eql(Number(reqSalaryParam));\r",
							"});\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(u_salary_1_5_year)\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog have name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.any.keys(\"name\");\r",
							"});\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog have age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.any.keys(\"age\");\r",
							"});\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"dog have name = Lucky\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"dog have age = 4\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://{{url}}:{{port}}/object_info_3?name=Serhii&age=28&salary=1000",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Serhii"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object info 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var jsonData = pm.response.json();\r",
							"var parseReqParama = pm.request.url.query.toObject()\r",
							"\r",
							"var reqNameParam = pm.request.url.query.toObject().name\r",
							"var reqAgeParam = pm.request.url.query.toObject().age\r",
							"var reqSalaryParam = pm.request.url.query.toObject().salary\r",
							"//спарсил ответ\r",
							"var responseName = jsonData.name\r",
							"var responseAge = jsonData.age\r",
							"var responseSalary = jsonData.salary\r",
							"\r",
							"pm.test(\"request param name == response name \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(responseName).to.eql(reqNameParam);\r",
							"});\r",
							"\r",
							"pm.test(\"request param age == response age \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(responseAge).to.eql(Number(reqAgeParam));\r",
							"});\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(responseSalary)\r",
							"console.log(reqSalaryParam)\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(responseSalary[0])\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(responseSalary[1])\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"console.log(responseSalary[2])\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"1st elem salary == salary*2\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(Number(responseSalary[1])).to.eql(reqSalaryParam*2);\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"2st elem salary == salary*3\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(Number(responseSalary[2])).to.eql(reqSalaryParam*3);\r",
							"});\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var i = 0;\r",
							"var q = 1;\r",
							"\r",
							"while(typeof responseSalary[i]!==\"undefined\"){\r",
							"    console.log(\"Salary * Number(\"+q+\")\"+responseSalary[i])\r",
							"    i++\r",
							"    q++\r",
							"}\r",
							"// или такой вариант : \r",
							"// for (let i = 0; i < responseSalary.length; i++) {\r",
							"//     console.log(\"Salary * Number(\"+(i+1)+\")\"+responseSalary[i])\r",
							"// }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}:{{port}}/object_info_4?name=Serhii&age=28&salary=1000",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Serhii"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User info 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//6. Спарсить response body в json.\r",
							"//7. Спарсить request.\r",
							"var jsonData = pm.response.json();\r",
							"var reqData = request.data\r",
							"var reqSalaryToNumb = Number(reqData.salary) \r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json have start_qa_salary\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.any.keys(\"start_qa_salary\");\r",
							"});\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json have qa_salary_after_6_months\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.any.keys(\"qa_salary_after_6_months\");\r",
							"});\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json have qa_salary_after_12_months\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.any.keys(\"qa_salary_after_12_months\");\r",
							"});\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json have qa_salary_after_1.5_year\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.any.keys(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json have qa_salary_after_3.5_years\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.any.keys(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"json have person\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.any.keys(\"person\");\r",
							"});\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary == salary request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(reqSalaryToNumb);\r",
							"});\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months == salary*2\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(reqSalaryToNumb*2);\r",
							"});\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months == salary*2.7\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(reqSalaryToNumb*2.7);\r",
							"});\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year == salary*3.3\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(reqSalaryToNumb*3.3);\r",
							"});\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years == salary*3.8\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(reqSalaryToNumb*3.8);\r",
							"});\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person first element == u_name=> salary from REQUEST\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(reqSalaryToNumb);\r",
							"});\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"person element == u_age=> age from REQUEST\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.person.u_age).to.eql(Number(reqData.age));\r",
							"});\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years ==  salary*4.2\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(reqSalaryToNumb*4.2);\r",
							"});\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var ia = jsonData.person\r",
							"\r",
							"for(const index in ia){\r",
							"    console.log(index + ' : ' + ia[index])\r",
							"}\r",
							"Object.keys(ia).forEach(key => console.log(ia[key]))\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://{{url}}:{{port}}/user_info_2",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}